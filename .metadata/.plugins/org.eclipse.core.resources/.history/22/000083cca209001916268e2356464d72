package com.example.substationtemperature;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.chart.PointStyle;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import com.example.substationtemperature.base.Declare;
import com.example.substationtemperature.view.SegmentControl;

import DateTimePickDialogUtil.DateTimePickDialogUtil;
import android.app.Activity;
import android.graphics.Color;
import android.graphics.Paint.Align;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.AdapterView.OnItemSelectedListener;

public class FragmentChar extends Fragment implements OnClickListener{
	private Activity activity;
	private View view;
	//绘制曲线用到的变量
	private XYSeries series; 
    private XYMultipleSeriesDataset dataset;  
    private XYMultipleSeriesRenderer renderer; 
    private XYSeriesRenderer r;
    private GraphicalView mChartView;
    int count;
    int u_xs=230;
    String[] titles = new String[] { "Ua","Ub" ,"Uc"};//,"Un"
    List<double[]> x = new ArrayList<double[]>();
    List<double[]> values = new ArrayList<double[]>();
    PointStyle[] styles;
    private int[] colors;
    
	//视图控件变量
    private Spinner spinner_histraychar_zhan,spinner_histraychar_cld;
    private TextView txt_startDatepicker,txt_endDatepicker;
    private Button btn_query;
    
    private String[] zhanArray={"110kV站1","35kV站"},cldArray={"Z-R-01","Z-C-02","C-02-123"}; 
	private ArrayAdapter<String> zhanAdapter,cldAdapter;
    
    private ListView list_data;
    private List<Map<String,Object>>list_histraydata=new ArrayList<Map<String,Object>>();
    private Map<String,Object>map;//=new HashMap<String,Object>();
    private SimpleAdapter adapter=null;
    int Temp_u1=0,Temp_u2=3;
    private Calendar calendar = Calendar.getInstance();
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	final String currentDateTimeStr = sdf.format(calendar.getTime());
	public FragmentChar(){
		
	}
	public Handler mHandler_read = new Handler()
	{										
//		  @SuppressLint("HandlerLeak")
		public void handleMessage(Message msg)										
		  {											
			  super.handleMessage(msg);			
			  if(msg.what == 0)
			  {
//				 while(!Declare.receive_flag){
				while(4==4){
					 refresh();
					 break;
				 }
			  }
		  }


	};

	 @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_char, container, false);
        //初始化视图
        initViews();
        initchar();
        
	    displaychar();
        return view;
        
	}
	 
	private void initchar() {
		// TODO Auto-generated method stub
		//========形成曲线===========
	  	count =100;
	    x.add(new double[count]);
	    x.add(new double[count]);
	    x.add(new double[count]);
	    //x.add(new double[count]);
	    double[] ua_Values = new double[count];
	    double[] ub_Values = new double[count];
	    double[] uc_Values = new double[count];
	    //double[] un_Values = new double[count];
        values.add(ua_Values);
        values.add(ub_Values);
        values.add(uc_Values);
        //values.add(un_Values);
        for (int i = 0; i < count; i++) {
            double angle = i * 2.8125;
            x.get(0)[i] = angle;
            x.get(1)[i] = angle;
            x.get(2)[i] = angle;
            //x.get(3)[i] = angle;
            double ua_rAngle = Math.toRadians(angle);//角度转换为弧度
	            double ub_rAngle = Math.toRadians(angle+120);//角度转换为弧度
	            double uc_rAngle = Math.toRadians(angle+240);//角度转换为弧度
            ua_Values[i] = Math.sin(ua_rAngle)*u_xs;
            ub_Values[i] = Math.sin(ub_rAngle)*u_xs;
            uc_Values[i] = Math.sin(uc_rAngle)*u_xs;
            //un_Values[i] = 0;

        }
	          
	         
	        //电压曲线
        dataset = new XYMultipleSeriesDataset();
         //series = new XYSeries(titles[0]);
	          
	    int length = titles.length;
	    for (int i = 0; i < length; i++) {
	        series = new XYSeries(titles[i]);
	        double[] xv = x.get(i);
	        double[] yv = values.get(i);
	        int seriesLength = xv.length;
	        for (int k = 0; k < seriesLength; k++) {
	            series.add(xv[k],yv[k]);
	        }
	        dataset.addSeries(series);        
	    }
	                                
	          
	    colors = new int[] {Color.YELLOW,Color.GREEN,Color.RED,Color.BLACK};//,Color.WHITE
	    styles = new PointStyle[] { PointStyle.POINT, PointStyle.POINT,PointStyle.POINT,};//,PointStyle.POINT
	    renderer = new XYMultipleSeriesRenderer();
	    renderer.setAxisTitleTextSize(16);
	    renderer.setChartTitleTextSize(20);
	    renderer.setLabelsTextSize(15);
	    renderer.setLegendTextSize(15);
	    renderer.setApplyBackgroundColor(true);
	    renderer.setBackgroundColor(colors[3]);
	    renderer.setShowGridX(true);
	         
	    int length1 = colors.length;
	    for (int j = 0; j < length1-1; j++) {
	      	r = new XYSeriesRenderer();
	        r.setColor(colors[j]); 
	        r.setPointStyle(styles[j]); 
	        r.setFillPoints(true); 
	        r.setLineWidth(2);  
	        renderer.addSeriesRenderer(j,r); 
	             
	    }
	    //setChartSettings(renderer, "", "", "", 0,103, -10, 200, Color.GRAY, Color.LTGRAY);
	          
	         //renderer.setXLabels(12); 
	    renderer.setYLabels(6);   
	    renderer.setXLabelsAlign(Align.RIGHT);
	    renderer.setYLabelsAlign(Align.RIGHT);
	    renderer.setPanEnabled(true, false);
	    renderer.setZoomEnabled(true);
	    renderer.setZoomButtonsVisible(true);
	    renderer.setZoomRate(1.1f);
	    //renderer.setFitLegend(true);
	        
	    LinearLayout barchart = (LinearLayout)view.findViewById(R.id.layout_chart); 
	    mChartView = ChartFactory.getLineChartView(activity, dataset, renderer);           
	    barchart.addView(mChartView, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
	    mChartView.invalidate();
	}
	private void initViews() {
		// TODO Auto-generated method stub
		spinner_histraychar_zhan=(Spinner)view.findViewById(R.id.spn_histraychar_zhandian);
		spinner_histraychar_cld=(Spinner)view.findViewById(R.id.spn_histraychar_celiangdian);
		//zhanArray[2]="110kV站5";
        zhanAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,zhanArray);
		zhanAdapter.setDropDownViewResource(R.layout.item_dropdown);
		
		spinner_histraychar_zhan.setPrompt("请选择站点名称");
		spinner_histraychar_zhan.setAdapter(zhanAdapter);
		spinner_histraychar_zhan.setSelection(zhanAdapter.getPosition(Declare.zhan));
		spinner_histraychar_zhan.setOnItemSelectedListener(new zhanSelectedListener());
		cldAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,cldArray);
		cldAdapter.setDropDownViewResource(R.layout.item_dropdown);
		
		spinner_histraychar_cld.setPrompt("请选择测量点名称");
		spinner_histraychar_cld.setAdapter(cldAdapter);
		spinner_histraychar_cld.setSelection(cldAdapter.getPosition(Declare.celiangdian));
		spinner_histraychar_cld.setOnItemSelectedListener(new cldSelectedListener());
		txt_startDatepicker=(TextView)view.findViewById(R.id.txt_histraychar_date);
		txt_startDatepicker.setText(sdf.format(Declare.time));
		txt_startDatepicker.setOnClickListener(this);
		
		btn_query=(Button)view.findViewById(R.id.histraychar_queryDataBtn);
		btn_query.setOnClickListener(this);
		SegmentControl segmentcontrol=(SegmentControl)view.findViewById(R.id.xiangbie);
		segmentcontrol.setSelectedIndex(Integer.valueOf(Declare.xiangbie-1));
		
		segmentcontrol.setOnSegmentControlClickListener(new SegmentControl.OnSegmentControlClickListener() {
			
			@Override
			public void onSegmentControlClick(int index) {
				// TODO Auto-generated method stub
				int count_u=dataset.getSeriesCount();
                for(int i=count_u-1;i>-1;i--){
            	dataset.removeSeries(i);
                }
            	series.clear(); 
		    	switch(index){               
                case 0:  
                	 Temp_u1=0;Temp_u2=1; 
                	 Declare.xiangbie=1;
                  break;
                  //-----------------------------------------------
                 case 1:  
                	 Temp_u1=1;Temp_u2=2;
                	 Declare.xiangbie=2;
                  break;
                  //-----------------------------------------------
                 case 2:  
                	 Temp_u1=2;Temp_u2=3;
                	 Declare.xiangbie=3;
                  break;
                  //-----------------------------------------------                 
                 case 3:  
                	 Temp_u1=0;Temp_u2=3;
                	 Declare.xiangbie=4;
                  //DisplayToast("请注意，切换到合相曲线"); 
                    //txv.setText("Ia谐波图");
                  break;
                  //-----------------------------------------------
                }
            	 //renderer.addSeriesRenderer(r);
            	displaychar();
		    } 
		});
		if(Declare.xiangbie==1){
			Temp_u1=0;Temp_u2=1;
		}else if(Declare.xiangbie==2){
			Temp_u1=1;Temp_u2=2;
		}else if(Declare.xiangbie==3){
			Temp_u1=2;Temp_u2=3;
		}else if(Declare.xiangbie==4){
			Temp_u1=0;Temp_u2=3;
		}
		
	}
	
	private void displaychar(){
		int count_i=dataset.getSeriesCount();
        for(int i=count_i-1;i>-1;i--){
    	dataset.removeSeries(i);
        }
    	series.clear();  
		for (int j = Temp_u1; j < Temp_u2; j++) {
             series = new XYSeries(titles[j]);
              double[] xv = x.get(j);
              double[] yv = values.get(j);
              int seriesLength = xv.length;
              for (int k = 0; k < seriesLength; k++) {
                  series.add(xv[k],yv[k]);
              }
              dataset.addSeries(series);
             //renderer.addSeriesRenderer(i,r); 
    	 }
    	 renderer.getSeriesRendererAt(0).setColor(colors[Temp_u1]);
    	 mChartView.invalidate();
	}
	
	@Override
	 public void onAttach(Activity activity){
		// TODO Auto-generated method stub
			super.onAttach(activity);
			this.activity=activity;
	 }
	 
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
	   protected XYMultipleSeriesDataset buildBarDataset(String[] titles, List<double[]> xvalues,List<double[]> yvalues) {
	        XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
	        int length = titles.length;
	        for (int i = 0; i < length; i++) {
	        	XYSeries series = new XYSeries(titles[i]);
	            double[] xv = xvalues.get(i);
	            double[] yv = yvalues.get(i);
	            int seriesLength = xv.length;
	            for (int k = 0; k < seriesLength; k++) {
	                series.add(xv[k],yv[k]);
	            }
	            dataset.addSeries(series);
	        }
	        return dataset;
	    }

	    protected XYMultipleSeriesRenderer buildBarRenderer(int[] colors, PointStyle[] styles, boolean fill) {
	        XYMultipleSeriesRenderer renderer = new XYMultipleSeriesRenderer();
	        renderer.setAxisTitleTextSize(16);
	        renderer.setChartTitleTextSize(20);
	        renderer.setLabelsTextSize(15);
	        renderer.setLegendTextSize(15);
	        int length = colors.length;
	        for (int i = 0; i < length; i++) {
	        	XYSeriesRenderer r = new XYSeriesRenderer(); 
	            r.setColor(colors[i]); 
	            r.setPointStyle(styles[i]); 
	            r.setFillPoints(fill); 
	            renderer.addSeriesRenderer(r); 

	            
	        }
	        return renderer;
	    }
	    protected void setChartSettings(XYMultipleSeriesRenderer renderer, String title, String xTitle, String yTitle, double xMin, double xMax, double yMin, double yMax, int axesColor, int labelsColor) {
	        renderer.setChartTitle(title);
	        renderer.setXTitle(xTitle);
	        renderer.setYTitle(yTitle);
	        renderer.setXAxisMin(xMin);
	        renderer.setXAxisMax(xMax);
	        renderer.setYAxisMin(yMin);
	        renderer.setYAxisMax(yMax);
	        renderer.setAxesColor(axesColor);
	        renderer.setLabelsColor(labelsColor);
	    }
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			Calendar calendar = Calendar.getInstance();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm");
			final String currentDateTimeStr = sdf.format(calendar.getTime());
			if(v.getId()==R.id.txt_histraychar_date){
				DateTimePickDialogUtil dateTimePicKDialog = new DateTimePickDialogUtil(activity,
						currentDateTimeStr);
				dateTimePicKDialog.dateTimePicKDialog(txt_startDatepicker);
			}else if(v.getId()==R.id.histraychar_queryDataBtn){
				//刷新选定地点的趋势图数据（向服务器要数据）
			}
		}
		//站点选择项操作
		private class zhanSelectedListener implements OnItemSelectedListener{

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				
			}
			
		}
		//测量点选择项的操作内容
		private class cldSelectedListener implements OnItemSelectedListener{

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub
				
			}
			
		}
		@Override
	    public void setUserVisibleHint(boolean isVisibleToUser) {
	        super.setUserVisibleHint(isVisibleToUser);
	        if (view!=null){
	        if(isVisibleToUser){
	        	initViews();
	        }
	        }
	    }
		private void refresh() {
			// TODO Auto-generated method stub
			
		}	

}
