package com.example.substationtemperature.view;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import com.example.substationtemperature.FragmentPicture;
import com.example.substationtemperature.base.PropertyForDrawPicture;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;


import android.util.AttributeSet;
import android.view.View;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;

public class CustomView extends View{   
    PropertyForDrawPicture[] options;
    Paint paint;   
    Matrix mt=new Matrix(); 
    int i=0;
    public CustomView(Context context) {   
    	this(context, null);
    	
        //paint = new Paint(); //设置一个笔刷大小是3的黄色的画笔   
        //paint.setColor(Color.YELLOW);
        //paint.setColor(Color.argb(0xFF, 0x00, 255, 234));
        //paint.setStrokeJoin(Paint.Join.ROUND);   
        //paint.setStrokeCap(Paint.Cap.ROUND);   
        //paint.setStrokeWidth(3);
        //options=FragmentPicture.drawsArray;
        //System.arraycopy(draws, 0, options, 0, draws.length);
        
    }   
                                                                                                                             
    public CustomView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }
    
    public CustomView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        // 业务代码
        setLayerType(View.LAYER_TYPE_SOFTWARE, null); 
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(1450, 800);
		
        this.setLayoutParams(params);
        this.setMinimumWidth(720);
        this.setMinimumHeight(1920);
    }
    @Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
	{
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
	}

	//在这里我们将测试canvas提供的绘制图形方法   
    @SuppressLint("DrawAllocation") @Override   
    protected void onDraw(Canvas canvas) {   
    	super.onDraw(canvas);
        	//if(FragmentPicture.drawsArray==null){
        	//	return ;
        	//}
    		/*for(int i=0;i<FragmentPicture.drawsArray.length;i++){
    			if(FragmentPicture.drawsArray[i]==null){return;}
    			if (FragmentPicture.drawsArray[i].getType().equals("")){
    			break;
    		}*/
 
        //清屏   
    	//canvas.drawColor(0, PorterDuff.Mode.CLEAR);
    		for (int i=0;i<FragmentPicture.drawslist.size();i++){
    		//PropertyForDrawPicture pfdp=FragmentPicture.drawsArray[i];
    			PropertyForDrawPicture pfdp=FragmentPicture.drawslist.get(i);
    		//paint.setColor(pfdp.getStrokeColor());
			//paint.setStrokeWidth(pfdp.getStrokeThinkness());
    		/**使用类的反射机制来对应不同的图形元素的类来完成图形绘制。将整个画布作为参数以及动作描述属性一起传给图形绘制类，
    		 *然后由图形类来完成对应图形的绘制。
    		 * */
    			
    		try {
				Class<?> cls = Class.forName("com.example.substationtemperature.visualshape."+pfdp.getType());
				try {
					//Method mth=cls.getMethod("CalcVisual");
					Constructor<?> ct = cls.getConstructor(Canvas.class,PropertyForDrawPicture.class);
					try {
						ct.newInstance(canvas,pfdp);
					} catch (InstantiationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		/*switch(pfdp.getType()){
    		case "Baseline":
    			try {
					Class cls = Class.forName("com.example.substationtemperature.VisualShape.BaseLine");
					try {
						//Method mth=cls.getMethod("CalcVisual");
						Constructor ct = cls.getConstructor(Canvas.class,PropertyForDrawPicture.class);
						try {
							ct.newInstance(canvas,pfdp);
						} catch (InstantiationException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IllegalArgumentException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (InvocationTargetException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} catch (NoSuchMethodException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    			//new BaseLine(canvas,pfdp);
    			break;
    		case "Line":
    			new Line(canvas,pfdp);
    			break;
    		case "Breaker":
    			new Breaker(canvas,pfdp);
    			break;
    		case "JumpLine":
    			new JumpLine(canvas,pfdp);
    			break;
    		case "Isolator":
    			new Isolator(canvas,pfdp);
    			break;
    		case "Node":
    		case "RootNode":
    			new Node(canvas,pfdp);
    			break;
    		case "Monitor":
    		case "Title":
    			new DrawText(canvas,pfdp);
    			break;
    		case "Capacitor":
    			new Capacitor(canvas,pfdp);
    			break;
    		case "Transformer":
    			new Transformer(canvas,pfdp);
    			break;
    		case "Area":
    			new Area(canvas,pfdp);
    			break;
    		case "EllipseArea":
    			new EllipseArea(canvas,pfdp);
    			break;
    		case "RectArea":
    			new RectArea(canvas,pfdp);
    			break;
    		case "Outer":
    			new Outer(canvas,pfdp);
    			break;
    		case "Ground":
    			new Ground(canvas,pfdp);
    			break;
    		case "Warning":
    			new Warning(canvas,pfdp);
    			break;
    		}*/
    	}
    	
    }
    
}