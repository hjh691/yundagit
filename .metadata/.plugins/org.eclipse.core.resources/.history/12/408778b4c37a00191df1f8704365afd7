package com.example.substationtemperature.view;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.HorizontalScrollView;
import android.widget.ScrollView;

import com.example.substationtemperature.FragmentPicture;
import com.example.substationtemperature.base.PropertyForDrawPicture;

public class CustomView extends View{   
    PropertyForDrawPicture[] options;
    private Paint paint=new Paint();   
    Matrix mt=new Matrix(); 
    int i=0;
    Canvas acanvas;
    private String mText = "测试文字，自定义view";
  //绘制时控制文本绘制的范围 
    private Rect mBound;
    private Handler handler = new Handler()
    {
     @SuppressLint("WrongCall") @Override
	  public void handleMessage(Message msg)
	     {
	      onDraw(acanvas);
	  }
     
    };
    public CustomView(Context context) {   
    	this(context, null);
    	
        //paint = new Paint(); //设置一个笔刷大小是3的黄色的画笔   
        //paint.setColor(Color.YELLOW);
        //paint.setColor(Color.argb(0xFF, 0x00, 255, 234));
        //paint.setStrokeJoin(Paint.Join.ROUND);   
        //paint.setStrokeCap(Paint.Cap.ROUND);   
        //paint.setStrokeWidth(3);
        //options=FragmentPicture.drawsArray;
        //System.arraycopy(draws, 0, options, 0, draws.length);
        
    }   
                                                                                                                             
    public CustomView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }
    
    public CustomView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        // 业务代码
        //this.mContext = context; 
       /* mBound = new Rect(); 
        paint = new Paint(); 
        paint.setTextSize(60); 
        paint.getTextBounds(mText, 0, mText.length(), mBound); */
        setLayerType(View.LAYER_TYPE_HARDWARE, paint); 
        //LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(1150, 800);
        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(800,1000);
        this.setLayoutParams(params);
        //this.setMinimumWidth(720);
        //this.setMinimumHeight(1920);
    }
   /* @Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
	{
    	//调用ViewGroup类中测量子类的方法  
    	
    	//measureChildren(widthMeasureSpec, heightMeasureSpec);  
    	//super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    	//setMeasuredDimension(widthMeasureSpec, 800);

	}/**/

	//在这里我们将测试canvas提供的绘制图形方法   
    @SuppressLint("DrawAllocation") @Override   
    protected void onDraw(Canvas canvas) {  
    	//super.onDraw(canvas);
        	//if(FragmentPicture.drawsArray==null){
        	//	return ;
        	//}
    		/*for(int i=0;i<FragmentPicture.drawsArray.length;i++){
    			if(FragmentPicture.drawsArray[i]==null){return;}
    			if (FragmentPicture.drawsArray[i].getType().equals("")){
    			break;
    		}*/
    	ViewGroup.LayoutParams params=this.getLayoutParams();
    	for (int i=0;i<FragmentPicture.drawslist.size();i++){
    		//PropertyForDrawPicture pfdp=FragmentPicture.drawsArray[i];
    		PropertyForDrawPicture pfdp=FragmentPicture.drawslist.get(i);
    		if(pfdp.getType().equals("Selection")){
    			
    			//pfdp.getStartPoint().x, pfdp.getStartPoint().y, pfdp.getEndPoint().x,pfdp.getEndPoint().y
    			if(Math.ceil(pfdp.getEndPoint().x+pfdp.getStartPoint().x)>params.width){
    				params.width=(int)Math.ceil(pfdp.getEndPoint().x+pfdp.getStartPoint().x);
    			}
    			if(Math.ceil(pfdp.getEndPoint().y+pfdp.getStartPoint().y)>params.height){
    				params.width=(int)Math.ceil(pfdp.getEndPoint().y+pfdp.getStartPoint().y);
    			}
    			this.setLayoutParams(params);
    			break;
			}
    	}
    	paint.setStyle(Paint.Style.FILL);
    	paint.setColor(Color.BLACK);
    	//canvas.drawRect(0, 0, params.width, params.height, paint);
    	//清屏   
    	//canvas.drawColor(0, PorterDuff.Mode.CLEAR);
    	
    	for (int i=0;i<FragmentPicture.drawslist.size();i++){
    		//PropertyForDrawPicture pfdp=FragmentPicture.drawsArray[i];
    			PropertyForDrawPicture pfdp=FragmentPicture.drawslist.get(i);
    		//paint.setColor(pfdp.getStrokeColor());
			//paint.setStrokeWidth(pfdp.getStrokeThinkness());
    		/**使用类的反射机制来对应不同的图形元素的类来完成图形绘制。将整个画布作为参数以及动作描述属性一起传给图形绘制类，
    		 *然后由图形类来完成对应图形的绘制。
    		 * */
    			
    		try {
				Class<?> cls = Class.forName("com.example.substationtemperature.visualshape."+pfdp.getType());
				try {
					//Method mth=cls.getMethod("CalcVisual");
					Constructor<?> ct = cls.getConstructor(Canvas.class,PropertyForDrawPicture.class);
					try {
						ct.newInstance(canvas,pfdp);
					} catch (InstantiationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					catch (IllegalAccessException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} catch (NoSuchMethodException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		/*switch(pfdp.getType()){
    		case "Baseline":
    			try {
					Class cls = Class.forName("com.example.substationtemperature.VisualShape.BaseLine");
					try {
						//Method mth=cls.getMethod("CalcVisual");
						Constructor ct = cls.getConstructor(Canvas.class,PropertyForDrawPicture.class);
						try {
							ct.newInstance(canvas,pfdp);
						} catch (InstantiationException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IllegalArgumentException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (InvocationTargetException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} catch (NoSuchMethodException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    			//new BaseLine(canvas,pfdp);
    			break;
    		case "Line":
    			new Line(canvas,pfdp);
    			break;
    		case "Breaker":
    			new Breaker(canvas,pfdp);
    			break;
    		case "JumpLine":
    			new JumpLine(canvas,pfdp);
    			break;
    		case "Isolator":
    			new Isolator(canvas,pfdp);
    			break;
    		case "Node":
    		case "RootNode":
    			new Node(canvas,pfdp);
    			break;
    		case "Monitor":
    		case "Title":
    			new DrawText(canvas,pfdp);
    			break;
    		case "Capacitor":
    			new Capacitor(canvas,pfdp);
    			break;
    		case "Transformer":
    			new Transformer(canvas,pfdp);
    			break;
    		case "Area":
    			new Area(canvas,pfdp);
    			break;
    		case "EllipseArea":
    			new EllipseArea(canvas,pfdp);
    			break;
    		case "RectArea":
    			new RectArea(canvas,pfdp);
    			break;
    		case "Outer":
    			new Outer(canvas,pfdp);
    			break;
    		case "Ground":
    			new Ground(canvas,pfdp);
    			break;
    		case "Warning":
    			new Warning(canvas,pfdp);
    			break;
    		}*/
    	}
    }

	/** 
     * 比onDraw先执行 
     * <p> 
     * 一个MeasureSpec封装了父布局传递给子布局的布局要求，每个MeasureSpec代表了一组宽度和高度的要求。 
     * 一个MeasureSpec由大小和模式组成 
     * 它有三种模式：UNSPECIFIED(未指定),父元素部队自元素施加任何束缚，子元素可以得到任意想要的大小; 
     * EXACTLY(完全)，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小； 
     * AT_MOST(至多)，子元素至多达到指定大小的值。 
     * <p> 
     * 它常用的三个函数： 
     * 1.static int getMode(int measureSpec):根据提供的测量值(格式)提取模式(上述三个模式之一) 
     * 2.static int getSize(int measureSpec):根据提供的测量值(格式)提取大小值(这个大小也就是我们通常所说的大小) 
     * 3.static int makeMeasureSpec(int size,int mode):根据提供的大小值和模式创建一个测量值(格式) 
     */ 
/*    @Override 
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { 
        super.onMeasure(widthMeasureSpec, heightMeasureSpec); 
        final int minimumWidth = getSuggestedMinimumWidth(); 
        final int minimumHeight = getSuggestedMinimumHeight(); 
        Log.e("YView", "---minimumWidth = " + minimumWidth + ""); 
        Log.e("YView", "---minimumHeight = " + minimumHeight + ""); 
        int width = measureWidth(minimumWidth, widthMeasureSpec); 
        int height = measureHeight(minimumHeight, heightMeasureSpec); 
        setMeasuredDimension(width, height); 
    }
*/
    private int measureWidth(int defaultWidth, int measureSpec) {

        int specMode = MeasureSpec.getMode(measureSpec); 
        int specSize = MeasureSpec.getSize(measureSpec); 
        Log.e("YViewWidth", "---speSize = " + specSize + "");


        switch (specMode) { 
            case MeasureSpec.AT_MOST: 
                defaultWidth = (int) paint.measureText(mText) + getPaddingLeft() + getPaddingRight();

                Log.e("YViewWidth", "---speMode = AT_MOST"); 
                break; 
            case MeasureSpec.EXACTLY: 
                Log.e("YViewWidth", "---speMode = EXACTLY"); 
                defaultWidth = specSize; 
                break; 
            case MeasureSpec.UNSPECIFIED: 
                Log.e("YViewWidth", "---speMode = UNSPECIFIED"); 
                defaultWidth = Math.max(defaultWidth, specSize); 
        } 
        return defaultWidth; 
    }


    private int measureHeight(int defaultHeight, int measureSpec) {

        int specMode = MeasureSpec.getMode(measureSpec); 
        int specSize = MeasureSpec.getSize(measureSpec); 
        Log.e("YViewHeight", "---speSize = " + specSize + "");

        switch (specMode) { 
            case MeasureSpec.AT_MOST: 
                defaultHeight = (int) (-paint.ascent() + paint.descent()) + getPaddingTop() + getPaddingBottom(); 
                Log.e("YViewHeight", "---speMode = AT_MOST"); 
                break; 
            case MeasureSpec.EXACTLY: 
                defaultHeight = specSize; 
                Log.e("YViewHeight", "---speSize = EXACTLY"); 
                break; 
            case MeasureSpec.UNSPECIFIED: 
                defaultHeight = Math.max(defaultHeight, specSize); 
                Log.e("YViewHeight", "---speSize = UNSPECIFIED"); 
//        1.基准点是baseline 
//        2.ascent：是baseline之上至字符最高处的距离 
//        3.descent：是baseline之下至字符最低处的距离 
//        4.leading：是上一行字符的descent到下一行的ascent之间的距离,也就是相邻行间的空白距离 
//        5.top：是指的是最高字符到baseline的值,即ascent的最大值 
//        6.bottom：是指最低字符到baseline的值,即descent的最大值

                break; 
        } 
        return defaultHeight;


    } 
}