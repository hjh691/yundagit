package com.example.substationtemperature;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import DateTimePickDialogUtil.DateTimePickDialogUtil;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.example.substationtemperature.adapter.ListItemAdapter_sms;
import com.example.substationtemperature.base.Declare;
import com.example.substationtemperature.base.ReturnData;
import com.example.substationtemperature.base.SmsInfo;
import com.example.substationtemperature.network.ClientService;

public class FragmentDailyrecord extends Fragment implements OnClickListener{
	private Activity activity;
	private View view;
	
	private Spinner spn_daily_zhan;
	private String[] zhanArray={}; 
	private ArrayAdapter<String> zhanAdapter;
	private TextView txt_startdate_daily,txt_enddate_daily;
	private Button btn_query_daily;
	
	private ArrayList<SmsInfo> xinxis;
	//private Calendar calendar = Calendar.getInstance();
	//private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	//private String currentDateTimeStr = sdf.format(calendar.getTime());
	private ListItemAdapter_sms mAdapter=null;
	private ListView list_daily;
	private String info;
	private boolean smsloop=true;
	private SmsInfo[] smsArray;
	
	private String fromtime,endtime;
	//private int minutes;
	private int stationid=0;
	private boolean isvisible;
	private ProgressDialog pd;
	public static Handler mHandler_sms;
	public FragmentDailyrecord(){
		
	}
	
	
	
	public class sleep_thread extends Thread{
		String str;
		@Override
    	public void run(){
	    	while(!Thread.currentThread().isInterrupted()&& smsloop)
	    	{
				try {
					sleep_thread.sleep(10000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Message msg = new Message();
	        	msg.what = 101;//read_od
	        	mHandler_sms.sendMessage(msg);
	    	}
		}
	}
	
	private void refresh() {
		// TODO Auto-generated method stub
		
	}
	@SuppressLint("HandlerLeak") @Override
	public View onCreateView(LayoutInflater inflater,ViewGroup container,
			Bundle saveInstanceState){
		view=inflater.inflate(R.layout.fragment_daily_record, container,false);		
		mHandler_sms = new Handler()
		{										
//			  @SuppressLint("HandlerLeak")
			public void handleMessage(Message msg)										
			  {											
				  super.handleMessage(msg);			
				  switch(msg.what)
				  {
				  case 0:
					  if((pd!=null)&&(pd.isShowing())){pd.dismiss();}
					  Toast.makeText(activity, "短信日志信息获取成功",Toast.LENGTH_SHORT).show();
					  break;
				  case 1:
					  if((pd!=null)&&(pd.isShowing())){pd.dismiss();}
					  info = (String) msg.obj;
	                  Toast.makeText(activity, info,Toast.LENGTH_SHORT).show();
					  break;
				  case 101:
					  refresh();
					  break;
				  case 80:
					  if(ClientService.zhanArray!=null){
							zhanAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,ClientService.zhanArray);
						}else{
							zhanAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,zhanArray);
						}
						spn_daily_zhan.setAdapter(zhanAdapter);
						if((zhanAdapter.getPosition(Declare.zhan)>=0)&&(isvisible)){
						spn_daily_zhan.setSelection(zhanAdapter.getPosition(Declare.zhan));}
					  break;
				  }
			  }
		};
		//if(getUserVisibleHint())
		initview();
		return view;
		
	}
	private void initview() {
		// TODO Auto-generated method stub
		spn_daily_zhan=(Spinner)view.findViewById(R.id.spn_dailyrecord_zhandian);
		spn_daily_zhan.setOnItemSelectedListener(new zhanSelectedListener());
		if(ClientService.zhanArray!=null){
			zhanAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,ClientService.zhanArray);
		}else{
			zhanAdapter=new ArrayAdapter<String>(activity,R.layout.item_select,zhanArray);
		}
		zhanAdapter.setDropDownViewResource(R.layout.item_dropdown);
		spn_daily_zhan.setPrompt("请选择站点名称");
		spn_daily_zhan.setAdapter(zhanAdapter);
		if((zhanAdapter!=null)&&(isvisible)){
		spn_daily_zhan.setSelection(zhanAdapter.getPosition(Declare.zhan));}
		
		
		txt_startdate_daily=(TextView)view.findViewById(R.id.dailyrecord_startDatePickerTV);
		txt_startdate_daily.setOnClickListener(this);
		txt_startdate_daily.setFocusable(true);
		txt_startdate_daily.setText(Declare.starttime);
		txt_startdate_daily.setOnFocusChangeListener(new mOnFocus_Listener());
		txt_enddate_daily=(TextView)view.findViewById(R.id.dailyrecord_endDatePickerTV);
		txt_enddate_daily.setOnClickListener(this);
		txt_enddate_daily.setText(Declare.endtime);
		txt_enddate_daily.setOnFocusChangeListener(new mOnFocus_Listener());
		btn_query_daily=(Button)view.findViewById(R.id.dailyrecord_queryDataBtn);
		btn_query_daily.setOnClickListener(this);
		list_daily=(ListView)view.findViewById(R.id.listview_dailyrecord);
		loadData();
		mAdapter=new ListItemAdapter_sms(activity,xinxis);
		//if (Declare.islogin){
			list_daily.setAdapter(mAdapter);
		//}
		//list_daily.setOnItemClickListener(new ItemClickListener());
		
	}
	
	private class mOnFocus_Listener implements OnFocusChangeListener{
		@Override 
			public void onFocusChange(View v, boolean hasFocus) {
			if(v.getId()==R.id.dailyrecord_startDatePickerTV){	
				Declare.starttime=txt_startdate_daily.getText().toString();
			}
			if(v.getId()==R.id.dailyrecord_endDatePickerTV){
				Declare.endtime=txt_enddate_daily.getText().toString();
			}
		}
	}

	@Override
	public void onAttach(Activity activity){
		super.onAttach(activity);
		this.activity=activity;
	}
	
	private void loadData() {
		// TODO Auto-generated method stub
		xinxis = new ArrayList<SmsInfo>();
		//Date time=new Date();
		if(smsArray!=null){
			for(int i=0;i<smsArray.length;i++){
			//for(int i=0;i<20;i++){
				SmsInfo currdata=new SmsInfo();//演示数据
			/*	currdata.setTelephone("13344445555");
				currdata.setMessageTime(currentDateTimeStr);
				currdata.setMessage("这里显示短信的详细内容");
				currdata.setIsSuccess(true);*/
				currdata.setTelephone(smsArray[i].getTelephone());//正常运行时的数据
				currdata.setMessageTime(smsArray[i].getMessageTime());
				currdata.setMessage(smsArray[i].getMessage());
				currdata.setIsSuccess(smsArray[i].getIsSuccess());
				xinxis.add(currdata);
				currdata=null;
			}
		}	
	}
	
	@SuppressWarnings("unused")
	private final class ItemClickListener implements OnItemClickListener {
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			//SmsInfo item = xinxis.get(position);
			//Intent intent=new Intent(activity, ManageDataDetailActivity.class);
			//Bundle bd=new Bundle();
			//Declare.zhan=spn_daily_zhan.getSelectedItem().toString();
			//Declare.celiangdian=item.getDetail();
			//Declare.time=DateTimeControl.strToDateLong(item.getMessageTime());
			//intent.putExtra("ameterno", bd);
			//startActivity(intent);
			//startActivity(new Intent(ManageDataActivity.this, ManageDataDetailActivity.class));
			// activity切换过场动画
			//overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);
			//MainActivity.selectNavigationItem(4);
    		//MainActivity.mViewPager.setCurrentItem(4);
		}
	}
	
	//站点选择项操作
			private class zhanSelectedListener implements OnItemSelectedListener{

				@Override
				public void onItemSelected(AdapterView<?> parent, View view,
						int position, long id) {
					// TODO Auto-generated method stub
					
					if(ClientService.stArray!=null){
						stationid=ClientService.stArray[position].getStationID();
					}
					if((Declare.islogin)&&(stationid!=Declare.stationid)&&(isvisible)){
						Declare.stationid=stationid;
						getSmsLog(fromtime,endtime);
						Declare.zhan=spn_daily_zhan.getSelectedItem().toString();
					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
				
			}
			//测量点选择项的操作内容
			@SuppressWarnings("unused")
			private class cldSelectedListener implements OnItemSelectedListener{

				@Override
				public void onItemSelected(AdapterView<?> parent, View view,
						int position, long id) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void onNothingSelected(AdapterView<?> parent) {
					// TODO Auto-generated method stub
					
				}
				
			}
			@SuppressLint("SimpleDateFormat") @Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Calendar calendar = Calendar.getInstance();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm");
				String currentDateTimeStr = sdf.format(calendar.getTime());
				switch(v.getId()){
				case R.id.dailyrecord_startDatePickerTV:
					currentDateTimeStr=(txt_startdate_daily.getText().toString().substring(0,4)+"年"+
							txt_startdate_daily.getText().toString().substring(5, 7)+"月"+
							txt_startdate_daily.getText().toString().substring(8,10)+"日"+
							txt_startdate_daily.getText().toString().substring(10,15));
					DateTimePickDialogUtil dateTimePicKDialog = new DateTimePickDialogUtil(activity,
							currentDateTimeStr);
					dateTimePicKDialog.dateTimePicKDialog(txt_startdate_daily);
					break;
				case R.id.dailyrecord_endDatePickerTV:
					currentDateTimeStr=(txt_enddate_daily.getText().toString().substring(0,4)+"年"+
							txt_enddate_daily.getText().toString().substring(5, 7)+"月"+
							txt_enddate_daily.getText().toString().substring(8,10)+"日"+
							txt_enddate_daily.getText().toString().substring(10,15));
					dateTimePicKDialog = new DateTimePickDialogUtil(activity,
							currentDateTimeStr);
					dateTimePicKDialog.dateTimePicKDialog(txt_enddate_daily);
					break;
				case R.id.dailyrecord_queryDataBtn:
					if(!txt_startdate_daily.getText().toString().equals("")){
						fromtime=txt_startdate_daily.getText().toString();
					}else{
						Toast.makeText(activity, "请选择起始时间", Toast.LENGTH_SHORT).show();
						return;
					}
					if(!txt_enddate_daily.getText().toString().equals("")){
						endtime=txt_enddate_daily.getText().toString();
					}else{
						Toast.makeText(activity, "请选择截止时间", Toast.LENGTH_SHORT).show();
						return;
					}
					Declare.starttime=txt_startdate_daily.getText().toString();
					Declare.endtime=txt_enddate_daily.getText().toString();
					//minutes = DateTimeControl.minutesDiff(DateTimeControl.GetItemDate(fromtime), DateTimeControl.GetItemDate(endtime));
					//Toast.makeText(activity, String.valueOf(minutes), 3000).show();
					if(Declare.islogin){
						getSmsLog(fromtime,endtime);
						pd=ProgressDialog.show(activity, "查询中...", "正在查询",true,false);
					}
					break;
				
				}
			}
	@Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        isvisible=isVisibleToUser;
        if(isVisibleToUser){
        	Declare.infotype=2;
        	if(view!=null){
        		initview();
        	}
        	if(!Declare.islogin){
        		FragmentIndex.comfir_display();
        	}
        }
        
    }
	
	private void getSmsLog(final String datetime,final String endtime) {
		// TODO Auto-generated method stub
		new Thread(new Runnable() {
	         @Override
	         public void run() {
	        	 try {
	        	 ReturnData iis = ClientService.sendpost("GetSmsLog"+"?from="+URLEncoder.encode(datetime,"utf-8")+"&to="+URLEncoder.encode(endtime,"utf-8"));
	        	 if(iis.mark.equals("ok")){
		        	 // 使用BufferedReader对象读取返回的数据流
				     // 按行读取，存储在StringBuider对象response中
				     BufferedReader reader = new BufferedReader(new InputStreamReader(iis.is));
				     //StringBuilder response = new StringBuilder();
				     String line;
				     JSONObject result = null;
				     JSONArray jsArray=null;
				     while ((line = reader.readLine()) != null) {
				         //response.append(line);
				    	 try {
				    		 result = new JSONObject( line);
				    	 } catch (JSONException e) {
				    			// TODO 自动生成的 catch 块
				    		 e.printStackTrace();
				    	 }
				     }
				     String errorcode=result.getString("Error");
				     //if(errorcode.equals("null")){
				     if(result.isNull("Error")){
				    	 result=result.getJSONObject("Result");
				    	 if(result.isNull("SmsLogs")){
				    		 Message msg = new Message();
				             msg.what = 1;
				             msg.obj="请求的短信日志数据为空";
				             mHandler_sms.sendMessage(msg);
				             return;
				    	 }
				    	 jsArray=result.getJSONArray("SmsLogs");
				    	 if(jsArray.length()>0){
				    	 smsArray=new SmsInfo[jsArray.length()];
				    	 for(int i=0;i<jsArray.length();i++){
				    		 result=(JSONObject) jsArray.get(i);
				    		 SmsInfo sd=new SmsInfo();
				    		 sd.setStationName(result.getString("Station"));
				    		 sd.setPersonName(result.getString("Person"));
				    		 sd.setSmsHistoryID(result.getInt("Id"));
				    		 sd.setTelephone(result.getString("Telephone"));
				    		 sd.setMessageTime(result.getString("Time"));
				    		 sd.setIsSuccess(result.getBoolean("Result"));
				    		 sd.setMessage(result.getString("Message"));
				    		 smsArray[i]=sd;//(SmsInfo) jsArray.get(i);
				    		 sd=null;
				    	 }
				    	 
				    	 Message msg = new Message();
			             msg.what = 0;
			             mHandler_sms.sendMessage(msg);
				    	 }else{
				    		 Message msg = new Message();
				             msg.what = 1;
				             msg.obj="请求的短信日志数据为空";
				             mHandler_sms.sendMessage(msg);
				    	 }
			    	 }else{
				    	 Message msg = new Message();
			             msg.what = 1;
			             msg.obj=errorcode;
			             mHandler_sms.sendMessage(msg);
				     }
	        	 }else if(iis.mark.equals("outtime")){
	        		 Message msg = new Message();
		             msg.what = 1;
		             msg.obj="连接超时";
		             mHandler_sms.sendMessage(msg);
	        	 }else if(iis.mark.equals("error")){
	        		 Message msg = new Message();
		             msg.what = 1;
		             msg.obj="连接错误";
		             mHandler_sms.sendMessage(msg);
	        	 }else if(iis.mark.equals("未授权")){
	        		 Message msg = new Message();
		             msg.what = 1;
		             msg.obj="操作失败，权限未认证";
		             mHandler_sms.sendMessage(msg);
	        	 }else{
	        		 Message msg = new Message();
	        		 msg.what = 1;
	        		 msg.obj=iis.mark;
	        		 mHandler_sms.sendMessage(msg);
        	     }
	        	 
	        } catch (Exception e){
	             //e.printStackTrace();
	             Message msg = new Message();
	             msg.what = 1;
	             msg.obj="操作失败，权限未认证";
	             mHandler_sms.sendMessage(msg);
	        }// finally {
	        	 //if((pd!=null)&&(pd.isShowing())){pd.dismiss();}
	        //}
	     }
		}).start();
	}

}
